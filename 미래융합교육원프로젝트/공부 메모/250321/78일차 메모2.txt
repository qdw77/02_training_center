videocapture
# 250321
import cv2

cap = cv2.VideoCapture("C:/Users/301-10/Desktop/미래 융합교육원 프로젝트2/web/winter-video.mp4")
while True: # while True로 해서 바로 재생되서 빠르게

    ret,frame=cap.read()
    cv2.imshow('wc',frame)
    if cv2.waitKey(28) & 0xFF == ord('q'):
        # cv2.waitKey(0) 미만 무한대기
        # cv2.waitKey(1)은 1ms간 입력 대기하는 방식
        # cv2.waitKey는 사용자가 누른키의 아스가 값을 변환함
        # 사용지기 q키를 누르면ord('q')로 변환됨 113 값 변환
        # & 0xFF  는 비트 연산 구간
        # cv2.waitKey(1)의 변환값을 8비트로 제한
        # cv2.waitKey()함수는 32비트로 숫자를 반환하고 이것을 8비트로 비교하는 코드
        # 0xFF 는 16진수 111111의미 이는 8비트를 의미
        # q키로 종료
        break

cap.release()
cv2.destroyAllWindows()


webcamcapture
import cv2
cap=cv2.VideoCapture(0)
image_counter=0
while True:
    ret,frame=cap.read()
    if not ret:
        print("웹캠 오류")
        break
    cv2.imshow("wc",frame)
    key=cv2.waitKey(1) & 0xFF
    if key==ord('c'): # c로 이미지 캡쳐
        image_filename=f"capture_imageM{image_counter}.jpg"
        cv2.imwrite(image_filename,frame)
        print("이미지 저장")
        # capture_imageM0
        image_counter+=1

    if key == ord('q'): # 종료
        break
cap.release()
cv2.destroyAllWindows()



ROItest
# 250321
# ROI: 관심 구역
# region of interest
#  이미지에서 특정 영역을 자르는 방법임

import cv2
image=cv2.imread('s.jpg')
rol=image[100:200,50:180]

cv2.imshow('ROI Image',rol)
cv2.waitKey(0)
cv2.destroyAllWindows()



cannyedges
import cv2

# 케냐 엣지: 이미지 엣지 검증 > 윤곽선 추출
from grayimage import gray_image

image=cv2.imread('s.jpg')
resized_image=cv2.resize(image,(600,600))
gray_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)
edges=cv2.Canny(gray_image,30,100)
cv2.imshow('edges',edges)
cv2.waitKey(0)
cv2.destroyAllWindows()


ResizedImage
import cv2

# 이미지 읽기
image = cv2.imread("C:/Users/301-10/PycharmProjects/PythonProject2/s.jpg")

# 이미지 크기 조정
resized_image = cv2.resize(image, (600, 400))

# 크기 조정된 이미지를 화면에 표시
cv2.imshow('resized image', resized_image)

# 사용자가 아무 키나 누를 때까지 대기
cv2.waitKey(0)

# 모든 윈도우 창 닫기
cv2.destroyAllWindows()


image_library
import cv2 # 영상처리 라이브러리 open_cv 불러옴

image=cv2.imread("s.jpg")
cv2.imshow('frame',image) # 이미지출력

cv2.waitKey(0) # 상사용자가 아무키를 누를 때까지 기다림
cv2.destroyAllWindows() # 모든 open cv 창을 닫는다


grayimage
import cv2

# 이미지 파일 읽기
image = cv2.imread(r"C:\Users\301-10\PycharmProjects\PythonProject2\s.jpg")  # raw string 사용

# 이미지가 제대로 읽혔는지 확인
if image is None:
    print("이미지를 읽을 수 없습니다. 경로를 확인해주세요.")
else:
    # 이미지 흑백으로 변환
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # 흑백 이미지 화면에 표시
    cv2.imshow('Gray Image', gray_image)

    # 키 입력 대기
    cv2.waitKey(0)

    # 윈도우 닫기
    cv2.destroyAllWindows()


250321
# 2025.03.21
from ctypes.macholib.dylib import dylib_info

import numpy as np
# 리스트와 함께 배웠음
test=np.array([1,2,3,4],int)
print(test)
print(type(test))
print(type(test[1]))

test=np.array(['1','2','3','4'],np.int64)
print(test)
print(type(test[1]))
print(test.dtype)

#arr 생성시 object를 문자열 넣어도 .int64 데이터 타입 지점으로 전부 숫자 전환
# 배열과 리스트와의 차이는 연산속도 차이

# 항상 같은 길이로
test=np.array([[1,2,3,4,5],[5,6,7,8,9]],np.int64)
print(test)

test = np.array([[[1,2,3,4],[5,6,7,8]],
    [[9,10,11,12],[13,14,15,16]]],np.int64)
print(test,"3차원: 텐서 tensor(3,2,4) 구조")
print(test.dtype)
print(test.shape)
print(test.size)
# 1차원 벡터
# 2차원 매트릭스
# 3차원 텐서
print(test.ndim) #텐서

# np.int64 / float64, int 32
# C언어 데이터 타입과 비슷한 형태


test_reshape = np.array(([1,2,3,4],[5,6,7,8]),int)
print(test_reshape)
print(test_reshape.shape)
print(test_reshape.size)

test_reshape2=test_reshape.reshape(8,) # 8개의 1줄짜리로 변환
print(test_reshape2) # 1차원 벡터로 변환 경과
print(test_reshape2.size) # 8개

# 총 사이즈(요소 수)같은 조건 하, 행 변환이 자유롭다
test_reshape3 = test_reshape.reshape(2,2,2) # 2*2*2 텐서 형태로 변환
print(test_reshape3)
print(test_reshape3.size)
print(test_reshape3.shape)

# flatten element
print(test_reshape3.flatten(),'flatten형태로 평탄화 1차원')
testindex = np.array(([1,2,3],[4,5,6]),int)
print(testindex)
print(testindex[0])
print(testindex[1])

testindex[0][0] = 100 # 재할당
print(testindex)

testindex[0,2] = 200
print(testindex)

testindex[0] = 300
print(testindex)


testlice=np.array(([1,2,3,4],[5,6,7,8],[9,10,11,12]),int)
print(testlice)
print(testlice.shape)
print(testlice.size)

print(testlice[:,:]) #슬라이스
print(testlice[:,:3]) #슬라이스
print(testlice[:,:3].shape) #슬라이스
print(testlice[:,:3].reshape(3,3)) #슬라이스

sample1=np.arange(40)
sample2=np.arange(0,40,2)
sample3=np.arange(0,40).reshape(4,10)
print(sample1.shape)
print(sample2.shape)
print(sample3.shape)

# np.ones
print(np.ones(shape=(10,),dtype=np.int32)) # 벡타 1 생성
print(np.ones((5,2),dtype=np.int32)) # 매트릭스 5*2

# ? np.zeros
print(np.zeros(shape=(10,),dtype=np.int32))
print(np.zeros(shape=(5,2),dtype=np.int32))

# np.empty
print(np.empty(shape=(10,),dtype=np.int32))
print(np.empty(shape=(5,2),dtype=np.int32))

# empty 와 zero는 결과가 같은 0으로 봐야만
# 차이 : ent 는 메모리에 할당하지 않고 형태만 변환
# 배열 array 10칸 짜리 형태만 선언해주고 값은 비워두는 것

print(np.identity(n=5,dtype=np.int32))
print(np.eye(N=5,M=5, dtype=np.int64))
# 매개변수 N 형 M열
# 
print(np.eye(3)) # ndarray의 데이터 지정 없는 상태에서 기본 dtype은 flat64
print(np.eye(3,5,k=2))

# diag
# eye로 만든 매트릭스에서 대각 값을 다루는 방법
print(np.eye(3,5,k=3)) # 대각 추출 시작점 0 기본값
print(np.diag(np.eye(3,5,k=3),k=3)) #대각 추출 시작점 3

# 데이터의 분포 관련
# random
# uniform: 균등 분표 함수
# 균등 분표: uniform distribution
# 연속현 분포에서 일정하게 분포
# 균등 분포한 각 결과 값을 알수없는 미래에서 발생할 이벤트 결과값 x가
# 각 예상되는 범위별로 균등한 확률로 일어난 것이라고 예상할 때 사용
# 주사위가 균등분표 예시 중 하나

# 균등분표
print(np.random.uniform(0,1,10).reshape(2,5)) # 먀ㅐ트릭스로 만드는 데 2바이 5자리로
# 0부터 1사이 균등 분포 표 10개 샘플링

sum =0
arr= np.random.uniform(0,1,3000)
for i in range(3000):
    element=arr[i]
    sum+=element
print("sum/3000:",sum/3000)
# 표본 수 많아지면 0~1 사이 평균 값 0.5에 가까운 값 도출

# 정규분포
# 어떤 데이터를 기반으로 미래 예측 결과값 도출할 때 x의 각 범위별 발생확률 추정 목적

arr_normal = np.random.normal(10,5,1000) # 평균 10, 표준편차 5
print("arr_normal:",arr_normal)
# 지수 표기법
# 자리 수 표현하는 법
# ex) 100,1000 : 1*10의 5제곱 => e*05

sum=0
for i in range(1000):
    ele=arr_normal[i]
    sum+=ele
print(sum/1000)


arr_1 = np.arange(1,11) # 배열 범위
print(arr_1)
print(arr_1.sum())


# shape 와 axis(축)
# dimension

# (5,)의 경우 axis 0은 5
# (5,6) 의 경우 axis 0는 5 aixs는 1
arr_2=np.arange(1,13).reshape(3,4)
print(arr_2)
print(arr_2.sum(axis=0)) # axis 0은 행방향
print(arr_2.sum(axis=1)) #열 방향


# 3차원 텐서의 경우 #0축:채널 1축:행 2축:열


# 넘파이 배열 합
# vstack : 위 아래 행 추가
a=np.array([1,2,3])
b=np.array([4,5,6])
print(np.vstack((a,b))) # 조립


# hstack : 우측에 붙는 형태로 추가
a= np.array([1,2,3])
b= np.array([4,5,6])
print(np.hstack((a,b))) # 하나의 배열이 됌

c= np.array([[1],[2],[3]])
print(c)
d=np.array([[4],[5],[6]])
print(d)
print(np.hstack((c,d))) # 판다스 넘파이 다룰 때 처럼 괄호로 묶어서 넣어줘야 한다


# h,v 방향 구분 없이 함: concat
a=np.array([[1,2,3]])
print(a)
b=np.array([[4,5,6]])
print(b)

print(np.concatenate((a,b),axis=0).reshape(6,1)) # 따로 방향 구분을 안하므로 axis 방향으르 지정해줘야 함 0은 아래로
print(np.concatenate((a,b),axis=1)) # 따로 방향 구분을 안하므로 axis 방향으르 지정해줘야 함 1은 옆으로

a= np.array([[1,2],[3,4]])
print(a)
b= np.array([[5,6]])
print(b)

# print(np.concatenate((a,b),axis=1)) # 오류가 남 열 방향이 맞지 않음, 매치가 정확히 되어야 함, 차원 수나 배열이 맞아야 함
print(np.concatenate((a,b),axis=0)) # 행 방향은 맞음
print(np.concatenate((a,b.T),axis=1))
# trans : 좌에서 우로 늘어진 5,6을 세로 형태로 변환
# b.T
# b.transpose()

# nimpy에서 제공하는 array간 연산
# 기본적으로 사칙연산 가능
# 같은 형태 연산의 경우 같은 위치(좌표)의 값 끼리 연산 됨: 브로드캐스팅
# 브로드캐스팅: element wise opeation

oper_arr=np.array([1,2,3])
print(oper_arr)
print(oper_arr*oper_arr)

broad_arr=np.array([[1,2,3],[4,5,6]])
print(broad_arr)
x=10
print("broad_arr+x",broad_arr+x)
print("broad_arr-x",broad_arr-x)
print("broad_arr*x",broad_arr*x)
print("broad_arr/x",broad_arr/x)
# 브로드캐스팅을 통해 형태가 다른 배열의 모든 요소에 연산 적용 됨
# 매트릭스 + 스칼라 / 백타+스탈라/ 매트릭스+벡타 등 전부 가능

broad_matrix=np.arange(1,13).reshape(4,3)
print("broad_matrix",broad_matrix)
broad_vector=np.arange(10,40,10)
print(broad_vector)

print(broad_matrix+broad_vector)

# 넘파이 배열간 비교
# compatison
# and  or 연산자와 유사
# all(), any() 함수 자료
# any()_는 하나라도 만족하면
# all()은 하나라도 만족하면
# any 와 all 을 모두 요소에 전부 브로드캐스팅된다
comp=np.arange(10)
print(comp)
print(comp>5)



# True False 를 다른 데이터로 바꾸어 배열 구성
# np.where 조건
where_arr=np.arange(10)
print(where_arr)
print(np.where(where_arr>5,1,0)) # 5보다 큰지 조건을 주고 참일 때 1 거짓일 때 0

# NaN
def nans(shape,dtype=np.float64):
    a=np.empty(shape,dtype)
    a.fill(np.nan) # eme ㅏ  만든 매틀릭스에 값을 채우는
    return a

print(nans([3,4]))

# nan 사용자 정의 함수를 통해 nan 매트릭스
nan_arrr = np.array([1,2,3,np.nan,5])
print(np.isnan(nan_arrr))
print(np.isnan(nans([3,4])))

# 최대값 최솟갑
# argmax
# argmay

arg_arr = np.array(([[1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18]]))
print(arg_arr)
print(np.argmax(arg_arr,axis=0))
#  행 중에서 가방 작은 값의 위치 반환
print(type(np.argmin(arg_arr)))


# boolean index : True or False 값을 배열에 적용시키면 True 값만 추출하는 방법
b_arr = np.array([1,2,3,4,5,6,7,8,9])
condition = b_arr>4 # T나 F가 담긴 배열
print(b_arr>4) # 브로드캐스팅으로 비교연산
print("배열[배열]:",b_arr[b_arr>4]) # 배열의 인덱스 값으로 배열(T or F) 을 넣었다 > 배열[배열]을 하면 true 값만
print(type(condition)) #
print(condition.astype(np.int32))


print(b_arr)
print(b_arr.take([1,1,1,2,2,2]))
#  tack 한순ㄴ b_arr 의 특정 인덱스에 해당하는 요소를 추출한다
# 인덱스 1,1,1,2,2,2 에서 특정 인덱스에 해당하는 요소를 추출
test_arr=np.arange(100) # 100범위
np.save("test",arr=test_arr) # npy 파일 생성
loaded=np.load(file='test.npy')
print(loaded)

# random access
# 배열의 요소 순서 : 논리 순와 물리 순서가 일치
# 랜덤 엑세스: 비순차적접근

# 리스트는 논리 순서와 물리 순서기 다름
# 처음부터 데이터를 찾는 방식인 순차접근
# Access 방식: sequential access

# 파이썬은 2중 포인터 형식으로 element를 저장하고 python object를 저장함
# numpy배열은 단일 포인터 메모리 첫 주소를 직저 지목
# numpy, ndarray객체



# AI
# AI 목적은 정확한 통역
# 하나의 함수라고 할 수 있음
# 엄청 많은 종류가 있음 구조적인 내부 구조를 보면 인간의 뉴런처럼 층이 많음
# 자연어, 이미지, 등이 있고 gpt는 프롬프트 기반
# 카메라 센서 등 이미지 기반
# 이미지 분석 AI모델을 걸쳐서 출력이 나옴
# 필터 등 영상 처리 전체 해상도(3 by 3) 값을 만들어주고 연산
# 브로드캐스팅
# 라벨링 이미지의 영역을 캡쳐 후 간격을 나누는 것
# ones로 영역 설정
# 수집 , 전처리 , 정제(필터 역할(침식,팽창))으로 노이즈 제거 혹은 결측 보완 마스크를 씌우기 , 라벨링
# 색깔 경계를 느리게 만들어줌 등의 마스크가 no로 만들어짐
# 그레이 스케일을 적용해서 흑백으로 변환 / 단일 채널로 줄여주는 것 / 컬러를 수치로 표시
# 채널 > 값
# threshold 임계값
# 이미지의 꼭지점, 경계 포인트 등 사용

test.npy